from alarm import Alarm

import time
from monitor import h칛mta_cpu_anvandning, h칛mta_minnesanv칛ndning, h칛mta_diskanv칛ndning
larm_lista = []


def starta_칬vervakningslage():
    print("\n游댌 칐vervakningsl칛ge startat.")
    print("Tryck Ctrl + C f칬r att avbryta och 친terg친 till huvudmenyn.\n")

    try:
        while True:
            cpu = h칛mta_cpu_anv칛ndning()
            mem_procent, _, _ = h칛mta_minnesanv칛ndning()
            disk_procent, _, _ = h칛mta_diskanv칛ndning()

            print("Systemet 칬vervakas...")

            for alarm in larm_lista:
                if alarm.칛r_aktiverat(cpu, mem_procent, disk_procent):
                    print(
                        f"丘멆잺  VARNING: {alarm.typ}-anv칛ndning 칬verstiger {alarm.niv친}%")

            time.sleep(5)

    except KeyboardInterrupt:
        print("\nAvbr칬t 칬vervakningsl칛ge. 칀terg친r till huvudmenyn...")

    except KeyboardInterrupt:
        print("\nAvbr칬t 칬vervakningsl칛ge. 칀terg친r till huvudmenyn...")


def visa_larm():
    print("\n-- Aktiva larm --")

    if not larm_lista:
        print("Inga larm har konfigurerats 칛nnu.")
    else:
        # Sortera listan p친 typ av larm (funktionell programmering!)
        sorterade = sorted(larm_lista, key=lambda alarm: alarm.typ)

        for alarm in sorterade:
            print(alarm)

    input("\nTryck ENTER f칬r att g친 tillbaka till huvudmenyn...")


def skapa_larm():
    print("\n-- Skapa ett larm --")
    print("1. CPU-anv칛ndning")
    print("2. Minnesanv칛ndning")
    print("3. Diskanv칛ndning")
    print("0. Tillbaka till huvudmeny")

    val = input("V칛lj ett omr친de att s칛tta larm p친: ")

    if val == "0":
        return

    if val not in ["1", "2", "3"]:
        print("Felaktigt val. F칬rs칬k igen.")
        return

    try:
        niv친 = int(input("St칛ll in niv친 f칬r larm (1-100): "))
        if niv친 < 1 or niv친 > 100:
            print("Du m친ste skriva en siffra mellan 1 och 100.")
            return
    except ValueError:
        print("Du m친ste skriva en siffra!")
        return

    if val == "1":
        larm_typ = "CPU"
    elif val == "2":
        larm_typ = "Minne"
    else:
        larm_typ = "Disk"

    larm_lista.append(Alarm(larm_typ, niv친))

    print(f"Larm f칬r {larm_typ} satt till {niv친}%")


def huvudmeny():
    while True:
        print("\n--- System칬vervakningsapplikation ---")
        print("1. Starta 칬vervakning")
        print("2. Lista aktiv 칬vervakning")
        print("3. Skapa larm")
        print("4. Visa larm")
        print("5. Starta 칬vervakningsl칛ge")
        print("0. Avsluta")

        val = input("V칛lj ett alternativ: ")

        if val == "1":
            print("Startar 칬vervakning... (inte implementerat 칛nnu)")
        elif val == "2":
            visa_overvakning()
        elif val == "3":
            skapa_larm()
        elif val == "4":
            visa_larm()
        elif val == "5":
            starta_overvakningslage()
        elif val == "0":
            print("Avslutar programmet.")
            break
        else:
            print("Ogiltigt val. F칬rs칬k igen.")


def visa_칬vervakning():
    cpu = h칛mta_cpu_anv칛ndning()
    mem_procent, mem_anvant, mem_total = h칛mta_minnesanv칛ndning()
    disk_procent, disk_anvant, disk_total = h칛mta_diskanv칛ndning()

    print(f"\nCPU Anv칛ndning: {cpu}%")
    print(
        f"Minnesanv칛ndning: {mem_procent}% ({mem_anvant} GB av {mem_total} GB)")
    print(
        f"Diskanv칛ndning: {disk_procent}% ({disk_anvant} GB av {disk_total} GB)")

    input("\nTryck enter f칬r att g친 tillbaka till huvudmenyn...")


# Starta programmet
huvudmeny()

